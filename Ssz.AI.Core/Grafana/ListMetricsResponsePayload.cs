/*
 * simPod JSON Datasource API
 *
 * API definition for the Grafana plugin simpod json datasource https://github.com/simPod/grafana-json-datasource
 *
 * The version of the OpenAPI document: 0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Ssz.AI.Core.Grafana
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ListMetricsResponsePayload : IEquatable<ListMetricsResponsePayload>
    {
        /// <summary>
        /// The label of the payload. If the value is empty, use the name as the label.
        /// </summary>
        /// <value>The label of the payload. If the value is empty, use the name as the label.</value>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; } = @"";

        /// <summary>
        /// The name of the payload. 
        /// </summary>
        /// <value>The name of the payload. </value>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; } = @"";


        /// <summary>
        /// If the value is select, the UI of the payload is a radio box. If the value is multi-select, the UI of the payload is a multi selection box. if the value is input, the UI of the payload is an input box. if the value is textarea, the UI of the payload is a multiline input box. The default is input.
        /// </summary>
        /// <value>If the value is select, the UI of the payload is a radio box. If the value is multi-select, the UI of the payload is a multi selection box. if the value is input, the UI of the payload is an input box. if the value is textarea, the UI of the payload is a multiline input box. The default is input.</value>
        [TypeConverter(typeof(CustomEnumConverter<TypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {            
            /// <summary>
            /// Enum SelectEnum for select
            /// </summary>
            [EnumMember(Value = "select")] // Attribute is not supported in System.Text.Json
            Select = 1,
            
            /// <summary>
            /// Enum MultiSelectEnum for multi-select
            /// </summary>
            [EnumMember(Value = "multi-select")] // Attribute is not supported in System.Text.Json
            MultiSelect = 2,
            
            /// <summary>
            /// Enum InputEnum for input
            /// </summary>
            [EnumMember(Value = "input")] // Attribute is not supported in System.Text.Json
            Input = 3,
            
            /// <summary>
            /// Enum TextareaEnum for textarea
            /// </summary>
            [EnumMember(Value = "textarea")] // Attribute is not supported in System.Text.Json
            Textarea = 4
        }

        /// <summary>
        /// If the value is select, the UI of the payload is a radio box. If the value is multi-select, the UI of the payload is a multi selection box. if the value is input, the UI of the payload is an input box. if the value is textarea, the UI of the payload is a multiline input box. The default is input.
        /// </summary>
        /// <value>If the value is select, the UI of the payload is a radio box. If the value is multi-select, the UI of the payload is a multi selection box. if the value is input, the UI of the payload is an input box. if the value is textarea, the UI of the payload is a multiline input box. The default is input.</value>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; } = TypeEnum.Input;

        /// <summary>
        /// Input box / selection box prompt information.
        /// </summary>
        /// <value>Input box / selection box prompt information.</value>
        [DataMember(Name="placeholder", EmitDefaultValue=false)]
        public string Placeholder { get; set; } = @"";

        /// <summary>
        /// Whether to overload the metrics API after modifying the value of the payload.
        /// </summary>
        /// <value>Whether to overload the metrics API after modifying the value of the payload.</value>
        [DataMember(Name="reloadMetric", EmitDefaultValue=true)]
        public bool ReloadMetric { get; set; } = false;

        /// <summary>
        /// Set the input / selection box width to a multiple of 8px.
        /// </summary>
        /// <value>Set the input / selection box width to a multiple of 8px.</value>
        [DataMember(Name="width", EmitDefaultValue=true)]
        public int Width { get; set; }

        /// <summary>
        /// If the payload type is select / multi-select, the list is the configuration of the option list.
        /// </summary>
        /// <value>If the payload type is select / multi-select, the list is the configuration of the option list.</value>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public List<ListMetricsResponsePayloadOptions>? Options { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListMetricsResponsePayloads {\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Placeholder: ").Append(Placeholder).Append("\n");
            sb.Append("  ReloadMetric: ").Append(ReloadMetric).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ListMetricsResponsePayload)obj);
        }

        /// <summary>
        /// Returns true if ListMetricsResponsePayloads instances are equal
        /// </summary>
        /// <param name="other">Instance of ListMetricsResponsePayloads to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListMetricsResponsePayload? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Label == other.Label ||
                    Label != null &&
                    Label.Equals(other.Label)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    Placeholder == other.Placeholder ||
                    Placeholder != null &&
                    Placeholder.Equals(other.Placeholder)
                ) && 
                (
                    ReloadMetric == other.ReloadMetric ||
                    
                    ReloadMetric.Equals(other.ReloadMetric)
                ) && 
                (
                    Width == other.Width ||
                    
                    Width.Equals(other.Width)
                ) && 
                (
                    Options == other.Options ||
                    Options != null &&
                    other.Options != null &&
                    Options.SequenceEqual(other.Options)
                );
        }

        /// <summary>
        /// Gets the projection code
        /// </summary>
        /// <returns>Projection code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var projectionCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Label != null)
                    projectionCode = projectionCode * 59 + Label.GetHashCode();
                    if (Name != null)
                    projectionCode = projectionCode * 59 + Name.GetHashCode();
                    
                    projectionCode = projectionCode * 59 + Type.GetHashCode();
                    if (Placeholder != null)
                    projectionCode = projectionCode * 59 + Placeholder.GetHashCode();
                    
                    projectionCode = projectionCode * 59 + ReloadMetric.GetHashCode();
                    
                    projectionCode = projectionCode * 59 + Width.GetHashCode();
                    if (Options != null)
                    projectionCode = projectionCode * 59 + Options.GetHashCode();
                return projectionCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ListMetricsResponsePayload? left, ListMetricsResponsePayload? right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ListMetricsResponsePayload? left, ListMetricsResponsePayload? right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
