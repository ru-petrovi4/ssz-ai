/*
 * simPod JSON Datasource API
 *
 * API definition for the Grafana plugin simpod json datasource https://github.com/simPod/grafana-json-datasource
 *
 * The version of the OpenAPI document: 0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Ssz.AI.Core.Grafana
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class QueryRequestAdhocFilter : IEquatable<QueryRequestAdhocFilter>
    {
        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        /// <example>City</example>
        [DataMember(Name = "key", EmitDefaultValue = false)]
        public string Key { get; set; } = @"";

        /// <summary>
        /// Gets or Sets VarOperator
        /// </summary>
        /// <example>&#x3D;</example>
        [DataMember(Name="operator", EmitDefaultValue=false)]
        public string VarOperator { get; set; } = @"";

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        /// <example>Berlin</example>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; } = @"";

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueryRequestAdhocFilters {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  VarOperator: ").Append(VarOperator).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((QueryRequestAdhocFilter)obj);
        }

        /// <summary>
        /// Returns true if QueryRequestAdhocFilters instances are equal
        /// </summary>
        /// <param name="other">Instance of QueryRequestAdhocFilters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueryRequestAdhocFilter? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Key == other.Key ||
                    Key != null &&
                    Key.Equals(other.Key)
                ) && 
                (
                    VarOperator == other.VarOperator ||
                    VarOperator != null &&
                    VarOperator.Equals(other.VarOperator)
                ) && 
                (
                    Value == other.Value ||
                    Value != null &&
                    Value.Equals(other.Value)
                );
        }

        /// <summary>
        /// Gets the projection code
        /// </summary>
        /// <returns>Projection code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var projectionCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Key != null)
                    projectionCode = projectionCode * 59 + Key.GetHashCode();
                    if (VarOperator != null)
                    projectionCode = projectionCode * 59 + VarOperator.GetHashCode();
                    if (Value != null)
                    projectionCode = projectionCode * 59 + Value.GetHashCode();
                return projectionCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(QueryRequestAdhocFilter? left, QueryRequestAdhocFilter? right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(QueryRequestAdhocFilter? left, QueryRequestAdhocFilter? right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
