/*
 * simPod JSON Datasource API
 *
 * API definition for the Grafana plugin simpod json datasource https://github.com/simPod/grafana-json-datasource
 *
 * The version of the OpenAPI document: 0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Ssz.AI.Core.Grafana
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class QueryResponse : IEquatable<QueryResponse>
    {
        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        /// <example>upper_25</example>
        [Required]
        [DataMember(Name="target", EmitDefaultValue=false)]
        public string Target { get; set; } = @"";

        /// <summary>
        /// Gets or Sets Datapoints
        /// </summary>
        /// <example>[[2.5, 1557385723416], [3.5, 1557385731634]]</example>
        [Required]
        [DataMember(Name="datapoints", EmitDefaultValue=false)]
        public List<List<decimal>>? Datapoints { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<TypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            Default = 0,
            /// <summary>
            /// Enum TableEnum for table
            /// </summary>
            [EnumMember(Value = "table")] // Attribute is not supported in System.Text.Json
            Table = 1
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [Required]
        [DataMember(Name="type", EmitDefaultValue = false)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Gets or Sets Columns
        /// </summary>
        [Required]
        [DataMember(Name="columns", EmitDefaultValue=false)]
        public List<QueryResponseColumn>? Columns { get; set; }

        /// <summary>
        /// Gets or Sets Rows
        /// </summary>
        /// <example>[[1557385723416, SE, 123], [1557385731634, SE, 456]]</example>
        [Required]
        [DataMember(Name="rows", EmitDefaultValue=false)]
        public List<object[]>? Rows { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueryResponse {\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  Datapoints: ").Append(Datapoints).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Columns: ").Append(Columns).Append("\n");
            sb.Append("  Rows: ").Append(Rows).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((QueryResponse)obj);
        }

        /// <summary>
        /// Returns true if QueryResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of QueryResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueryResponse? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Target == other.Target ||
                    Target != null &&
                    Target.Equals(other.Target)
                ) && 
                (
                    Datapoints == other.Datapoints ||
                    Datapoints != null &&
                    other.Datapoints != null &&
                    Datapoints.SequenceEqual(other.Datapoints)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    Columns == other.Columns ||
                    Columns != null &&
                    other.Columns != null &&
                    Columns.SequenceEqual(other.Columns)
                ) && 
                (
                    Rows == other.Rows ||
                    Rows != null &&
                    other.Rows != null &&
                    Rows.SequenceEqual(other.Rows)
                );
        }

        /// <summary>
        /// Gets the projection code
        /// </summary>
        /// <returns>Projection code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var projectionCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Target != null)
                    projectionCode = projectionCode * 59 + Target.GetHashCode();
                    if (Datapoints != null)
                    projectionCode = projectionCode * 59 + Datapoints.GetHashCode();
                    
                    projectionCode = projectionCode * 59 + Type.GetHashCode();
                    if (Columns != null)
                    projectionCode = projectionCode * 59 + Columns.GetHashCode();
                    if (Rows != null)
                    projectionCode = projectionCode * 59 + Rows.GetHashCode();
                return projectionCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(QueryResponse? left, QueryResponse? right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(QueryResponse? left, QueryResponse? right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
