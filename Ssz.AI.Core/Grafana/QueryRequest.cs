/*
 * simPod JSON Datasource API
 *
 * API definition for the Grafana plugin simpod json datasource https://github.com/simPod/grafana-json-datasource
 *
 * The version of the OpenAPI document: 0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Ssz.AI.Core.Grafana
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class QueryRequest : IEquatable<QueryRequest>
    {
        /// <summary>
        /// Gets or Sets PanelId
        /// </summary>
        [DataMember(Name = "panelId", EmitDefaultValue = false)]
        public int PanelId { get; set; }

        /// <summary>
        /// Gets or Sets Range
        /// </summary>
        [DataMember(Name = "range", EmitDefaultValue = false)]
        public QueryRequestRange? Range { get; set; }

        /// <summary>
        /// Gets or Sets RangeRaw
        /// </summary>
        [DataMember(Name = "rangeRaw", EmitDefaultValue = false)]
        public RawTimeFrame? RangeRaw { get; set; }

        /// <summary>
        /// Gets or Sets Interval
        /// </summary>
        /// <example>30s</example>
        [DataMember(Name = "interval", EmitDefaultValue = false)]
        public string Interval { get; set; } = @"";

        /// <summary>
        /// Gets or Sets IntervalMs
        /// </summary>
        /// <example>5500</example>
        [DataMember(Name = "intervalMs", EmitDefaultValue = true)]
        public decimal IntervalMs { get; set; }

        /// <summary>
        /// Gets or Sets MaxDataPoints
        /// </summary>
        /// <example>50</example>
        [DataMember(Name = "maxDataPoints", EmitDefaultValue = true)]
        public decimal MaxDataPoints { get; set; }

        /// <summary>
        /// Gets or Sets Targets
        /// </summary>
        [DataMember(Name = "targets", EmitDefaultValue = false)]
        public List<QueryRequestTarget>? Targets { get; set; }

        /// <summary>
        /// Gets or Sets ScopedVars
        /// </summary>
        /// <example>{&quot;__interval&quot;:{&quot;text&quot;:&quot;1s&quot;,&quot;value&quot;:&quot;1s&quot;},&quot;__interval_ms&quot;:{&quot;text&quot;:1000,&quot;value&quot;:1000}}</example>
        [DataMember(Name = "scopedVars", EmitDefaultValue = false)]
        public Object? ScopedVars { get; set; }

        /// <summary>
        /// Gets or Sets AdhocFilters
        /// </summary>
        [DataMember(Name = "adhocFilters", EmitDefaultValue = false)]
        public List<QueryRequestAdhocFilter>? AdhocFilters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueryRequest {\n");
            sb.Append("  PanelId: ").Append(PanelId).Append("\n");
            sb.Append("  Range: ").Append(Range).Append("\n");
            sb.Append("  RangeRaw: ").Append(RangeRaw).Append("\n");
            sb.Append("  Interval: ").Append(Interval).Append("\n");
            sb.Append("  IntervalMs: ").Append(IntervalMs).Append("\n");
            sb.Append("  MaxDataPoints: ").Append(MaxDataPoints).Append("\n");
            sb.Append("  Targets: ").Append(Targets).Append("\n");
            sb.Append("  ScopedVars: ").Append(ScopedVars).Append("\n");
            sb.Append("  AdhocFilters: ").Append(AdhocFilters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }        

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((QueryRequest)obj);
        }

        /// <summary>
        /// Returns true if QueryRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of QueryRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueryRequest? other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    PanelId == other.PanelId ||
                    PanelId != null &&
                    PanelId.Equals(other.PanelId)
                ) &&
                (
                    Range == other.Range ||
                    Range != null &&
                    Range.Equals(other.Range)
                ) &&
                (
                    RangeRaw == other.RangeRaw ||
                    RangeRaw != null &&
                    RangeRaw.Equals(other.RangeRaw)
                ) &&
                (
                    Interval == other.Interval ||
                    Interval != null &&
                    Interval.Equals(other.Interval)
                ) &&
                (
                    IntervalMs == other.IntervalMs ||

                    IntervalMs.Equals(other.IntervalMs)
                ) &&
                (
                    MaxDataPoints == other.MaxDataPoints ||

                    MaxDataPoints.Equals(other.MaxDataPoints)
                ) &&
                (
                    Targets == other.Targets ||
                    Targets != null &&
                    other.Targets != null &&
                    Targets.SequenceEqual(other.Targets)
                ) &&
                (
                    ScopedVars == other.ScopedVars ||
                    ScopedVars != null &&
                    ScopedVars.Equals(other.ScopedVars)
                ) &&
                (
                    AdhocFilters == other.AdhocFilters ||
                    AdhocFilters != null &&
                    other.AdhocFilters != null &&
                    AdhocFilters.SequenceEqual(other.AdhocFilters)
                );
        }

        /// <summary>
        /// Gets the projection code
        /// </summary>
        /// <returns>Projection code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var projectionCode = 41;
                // Suitable nullity checks etc, of course :)
                if (PanelId != null)
                    projectionCode = projectionCode * 59 + PanelId.GetHashCode();
                if (Range != null)
                    projectionCode = projectionCode * 59 + Range.GetHashCode();
                if (RangeRaw != null)
                    projectionCode = projectionCode * 59 + RangeRaw.GetHashCode();
                if (Interval != null)
                    projectionCode = projectionCode * 59 + Interval.GetHashCode();

                projectionCode = projectionCode * 59 + IntervalMs.GetHashCode();

                projectionCode = projectionCode * 59 + MaxDataPoints.GetHashCode();
                if (Targets != null)
                    projectionCode = projectionCode * 59 + Targets.GetHashCode();
                if (ScopedVars != null)
                    projectionCode = projectionCode * 59 + ScopedVars.GetHashCode();
                if (AdhocFilters != null)
                    projectionCode = projectionCode * 59 + AdhocFilters.GetHashCode();
                return projectionCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(QueryRequest? left, QueryRequest? right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(QueryRequest? left, QueryRequest? right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
